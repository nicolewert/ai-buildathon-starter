{
  "name": "ai-buildathon-starter",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "clean": "rm -rf .next out dist",
    "setup-convex": "npx convex dev --once && node -e \"const fs = require('fs'); const url = process.env.NEXT_PUBLIC_CONVEX_URL || 'CONVEX_URL_FROM_CONVEX_DEV'; const env = fs.readFileSync('.env.example', 'utf8'); fs.writeFileSync('.env.local', env.replace(/# NEXT_PUBLIC_CONVEX_URL=.*/g, \\`NEXT_PUBLIC_CONVEX_URL=${url}\\`).replace(/# CONVEX_URL=.*/g, \\`CONVEX_URL=${url}\\`));\" && echo \"âœ… Convex setup complete! Run 'pnpm dev-full' to start development.\"",
    "dev-full": "concurrently \"pnpm dev\" \"npx convex dev\" \"pnpm mcp:dev:convex\"",
    "dev-full-with-puppeteer": "concurrently \"pnpm dev\" \"npx convex dev\" \"pnpm mcp:dev:convex\" \"pnpm mcp:dev:puppeteer\"",
    "mcp:build": "pnpm mcp:build:convex && pnpm mcp:build:puppeteer",
    "mcp:build:convex": "cd mcp-servers/convex && npm run build",
    "mcp:build:puppeteer": "cd mcp-servers/puppeteer && npm install && npm run build",
    "mcp:dev:convex": "pnpm mcp:build:convex && node mcp-servers/convex/dist/index.js",
    "mcp:dev:puppeteer": "pnpm mcp:build:puppeteer && node mcp-servers/puppeteer/dist/index.js",
    "mcp-connect": "node -e \"const fs = require('fs'); const settings = JSON.parse(fs.readFileSync('.claude/settings.json', 'utf8')); settings.mcpServers = settings.mcpServers || {}; settings.mcpServers['convex-hackathon'] = { command: 'node', args: ['mcp-servers/convex/dist/index.js'], env: { CONVEX_URL: process.env.CONVEX_URL || process.env.NEXT_PUBLIC_CONVEX_URL } }; fs.writeFileSync('.claude/settings.json', JSON.stringify(settings, null, 2)); console.log('âœ… Convex MCP server connected to Claude Code!');\"",
    "mcp-connect-puppeteer": "node -e \"const fs = require('fs'); const settings = JSON.parse(fs.readFileSync('.claude/settings.json', 'utf8')); settings.mcpServers = settings.mcpServers || {}; settings.mcpServers['puppeteer-hackathon'] = { command: 'node', args: ['mcp-servers/puppeteer/dist/index.js'] }; fs.writeFileSync('.claude/settings.json', JSON.stringify(settings, null, 2)); console.log('âœ… Puppeteer MCP server connected to Claude Code!');\"",
    "mcp-connect-all": "pnpm mcp-connect && pnpm mcp-connect-puppeteer && echo \"âœ… All MCP servers connected to Claude Code!\"",
    "setup-vercel-mcp": "echo 'ðŸ”— Setting up Vercel MCP integration...' && echo '1. Open Claude Code' && echo '2. Run: /connect mcp --url https://mcp.vercel.com' && echo '3. Authenticate with your Vercel account when prompted' && echo 'âœ… Vercel MCP setup complete! You can now manage Vercel deployments through Claude Code.'",
    "connect-vercel-mcp": "node -e \"const fs = require('fs'); const settings = JSON.parse(fs.readFileSync('.claude/settings.json', 'utf8')); settings.mcpServers = settings.mcpServers || {}; settings.mcpServers['vercel'] = { transport: { type: 'http', url: 'https://mcp.vercel.com' } }; fs.writeFileSync('.claude/settings.json', JSON.stringify(settings, null, 2)); console.log('âœ… Vercel MCP server added to Claude Code settings!');\"",
    "dev-bg": "concurrently --raw \"pnpm dev\" \"npx convex dev\" \"pnpm mcp:dev:convex\" \"pnpm mcp:dev:puppeteer\"",
    "test-integration": "node tests/integration/taskList.test.js",
    "ci-check": "node tests/runner.js"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.1",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.25.4",
    "lucide-react": "^0.539.0",
    "next": "15.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.62.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^4.0.17"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@modelcontextprotocol/sdk": "^1.17.2",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "concurrently": "^9.2.0",
    "eslint": "^9",
    "eslint-config-next": "15.4.6",
    "kill-port": "^2.0.1",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "puppeteer": "^21.11.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
